#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-react-chat:server');
var http = require('http');
var socketIO = require('socket.io');
var User = require('../api/models/User');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
  *Create and manage sockets
**/
var io = socketIO(server);
io.on('connection', async (socket)=>{
  var user = socket.handshake.query.username;
  var onlineUsers = [];

  //Find the newly joined user, update his online status to true and find all online users
  await User.findOneAndUpdate({username: user}, {online: true});
  onlineUsers = await User.find({online: true}, 'username');
  onlineUsers = onlineUsers.map(user=>user.username);

  socket.emit('get online users', onlineUsers);
  
  socket.broadcast.emit('user joined', {
	event: 'join',
	user: user,
	onlineUsers: onlineUsers
  });
  
  socket.on('new message', (data)=>{
	socket.broadcast.emit('new message', data);
  });

  socket.on('disconnect', async ()=>{

  	//Find the user that just left, update his online status to false and find all online users
	await User.findOneAndUpdate({username: user}, {online: false});
	onlineUsers = await User.find({online: true}, 'username');
	onlineUsers = onlineUsers.map(user=>user.username);

	socket.broadcast.emit('user left', {
		event: 'leave',
		user: user,
		onlineUsers: onlineUsers
	});
  });

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
	// named pipe
	return val;
  }

  if (port >= 0) {
	// port number
	return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
	throw error;
  }

  var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
	case 'EACCES':
	  console.error(bind + ' requires elevated privileges');
	  process.exit(1);
	  break;
	case 'EADDRINUSE':
	  console.error(bind + ' is already in use');
	  process.exit(1);
	  break;
	default:
	  throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log("Listening on port 3001");
  var addr = server.address();
  var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
  debug('Listening on ' + bind);
}
